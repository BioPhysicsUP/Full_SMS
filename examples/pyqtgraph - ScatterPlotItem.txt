# -*- coding: utf-8 -*-
"""
Example demonstrating a variety of scatter plot features.
"""



## Add path to library (just for examples; you do not need this)
import initExample

from pyqtgraph.Qt import QtGui, QtCore
import pyqtgraph as pg
import numpy as np

app = QtGui.QApplication([])
mw = QtGui.QMainWindow()
mw.resize(800,800)
plot_widget = pg.PlotWidget()  ## GraphicsView with GraphicsLayout inserted by default
mw.setCentralWidget(plot_widget)
mw.show()
mw.setWindowTitle('pyqtgraph example: ScatterPlot')

## create four areas to add plots
plot_item = plot_widget.getPlotItem()

## Make all plots clickable
lastClicked = []
def clicked(plot, points):
    global lastClicked
    for p in lastClicked:
        p.resetPen()
    print("clicked points", points)
    for p in points:
        p.setPen('b', width=2)
    lastClicked = points


scatter_plot_item = pg.ScatterPlotItem(pxMode=False)   ## Set pxMode=False to allow spots to transform with the view
scatter_data = []
for i in range(10):
    for j in range(10):
        scatter_data.append({'pos': (1e-6*i, 1e-6*j), 'size': 1e-6, 'pen': {'color': 'w', 'width': 2}, 'brush':pg.intColor(i*10+j, 100)})
scatter_plot_item.addPoints(scatter_data)
plot_item.addItem(scatter_plot_item)
scatter_plot_item.sigClicked.connect(clicked)


## Start Qt event loop unless running in interactive mode.
if __name__ == '__main__':
    import sys
    if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):
        QtGui.QApplication.instance().exec_()

